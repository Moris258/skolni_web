# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  admin: Boolean
  name: String
  username: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  galleries(
    where: GalleryWhereInput! = {}
    orderBy: [GalleryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Gallery!]
  galleriesCount(where: GalleryWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  admin: BooleanFilter
  name: StringFilter
  username: StringFilter
  posts: PostManyRelationFilter
  galleries: GalleryManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input GalleryManyRelationFilter {
  every: GalleryWhereInput
  some: GalleryWhereInput
  none: GalleryWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  admin: OrderDirection
  name: OrderDirection
  username: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  admin: Boolean
  name: String
  username: String
  password: String
  posts: PostRelateToManyForUpdateInput
  galleries: GalleryRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input GalleryRelateToManyForUpdateInput {
  disconnect: [GalleryWhereUniqueInput!]
  set: [GalleryWhereUniqueInput!]
  create: [GalleryCreateInput!]
  connect: [GalleryWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  admin: Boolean
  name: String
  username: String
  password: String
  posts: PostRelateToManyForCreateInput
  galleries: GalleryRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input GalleryRelateToManyForCreateInput {
  create: [GalleryCreateInput!]
  connect: [GalleryWhereUniqueInput!]
}

type Post {
  id: ID!
  creation: DateTime
  author: User
  title: String
  country: PostCountryType
  content: Post_content_Document
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum PostCountryType {
  czechia
  lithuania
  romania
  italy
  portugal
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  creation: DateTimeNullableFilter
  author: UserWhereInput
  title: StringFilter
  country: PostCountryTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostCountryTypeNullableFilter {
  equals: PostCountryType
  in: [PostCountryType!]
  notIn: [PostCountryType!]
  not: PostCountryTypeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  creation: OrderDirection
  title: OrderDirection
  country: OrderDirection
}

input PostUpdateInput {
  creation: DateTime
  author: UserRelateToOneForUpdateInput
  title: String
  country: PostCountryType
  content: JSON
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  creation: DateTime
  author: UserRelateToOneForCreateInput
  title: String
  country: PostCountryType
  content: JSON
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Info {
  id: ID!
  content: Info_content_Document
}

type Info_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input InfoWhereUniqueInput {
  id: ID
}

input InfoWhereInput {
  AND: [InfoWhereInput!]
  OR: [InfoWhereInput!]
  NOT: [InfoWhereInput!]
  id: IDFilter
}

input InfoOrderByInput {
  id: OrderDirection
}

input InfoUpdateInput {
  content: JSON
}

input InfoUpdateArgs {
  where: InfoWhereUniqueInput!
  data: InfoUpdateInput!
}

input InfoCreateInput {
  content: JSON
}

type Photo {
  id: ID!
  photo: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
}

input PhotoOrderByInput {
  id: OrderDirection
}

input PhotoUpdateInput {
  photo: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  photo: ImageFieldInput
}

type Gallery {
  id: ID!
  author: User
  country: GalleryCountryType
  images(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  imagesCount(where: PhotoWhereInput! = {}): Int
  name: String
}

enum GalleryCountryType {
  czechia
  lithuania
  romania
  italy
  portugal
}

input GalleryWhereUniqueInput {
  id: ID
}

input GalleryWhereInput {
  AND: [GalleryWhereInput!]
  OR: [GalleryWhereInput!]
  NOT: [GalleryWhereInput!]
  id: IDFilter
  author: UserWhereInput
  country: GalleryCountryTypeNullableFilter
  images: PhotoManyRelationFilter
  name: StringFilter
}

input GalleryCountryTypeNullableFilter {
  equals: GalleryCountryType
  in: [GalleryCountryType!]
  notIn: [GalleryCountryType!]
  not: GalleryCountryTypeNullableFilter
}

input PhotoManyRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input GalleryOrderByInput {
  id: OrderDirection
  country: OrderDirection
  name: OrderDirection
}

input GalleryUpdateInput {
  author: UserRelateToOneForUpdateInput
  country: GalleryCountryType
  images: PhotoRelateToManyForUpdateInput
  name: String
}

input PhotoRelateToManyForUpdateInput {
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

input GalleryUpdateArgs {
  where: GalleryWhereUniqueInput!
  data: GalleryUpdateInput!
}

input GalleryCreateInput {
  author: UserRelateToOneForCreateInput
  country: GalleryCountryType
  images: PhotoRelateToManyForCreateInput
  name: String
}

input PhotoRelateToManyForCreateInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createInfo(data: InfoCreateInput!): Info
  createInfos(data: [InfoCreateInput!]!): [Info]
  updateInfo(where: InfoWhereUniqueInput!, data: InfoUpdateInput!): Info
  updateInfos(data: [InfoUpdateArgs!]!): [Info]
  deleteInfo(where: InfoWhereUniqueInput!): Info
  deleteInfos(where: [InfoWhereUniqueInput!]!): [Info]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createGallery(data: GalleryCreateInput!): Gallery
  createGalleries(data: [GalleryCreateInput!]!): [Gallery]
  updateGallery(
    where: GalleryWhereUniqueInput!
    data: GalleryUpdateInput!
  ): Gallery
  updateGalleries(data: [GalleryUpdateArgs!]!): [Gallery]
  deleteGallery(where: GalleryWhereUniqueInput!): Gallery
  deleteGalleries(where: [GalleryWhereUniqueInput!]!): [Gallery]
  endSession: Boolean!
  authenticateUserWithPassword(
    username: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  admin: Boolean
  name: String
  username: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  infos(
    where: InfoWhereInput! = {}
    orderBy: [InfoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Info!]
  info(where: InfoWhereUniqueInput!): Info
  infosCount(where: InfoWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  galleries(
    where: GalleryWhereInput! = {}
    orderBy: [GalleryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Gallery!]
  gallery(where: GalleryWhereUniqueInput!): Gallery
  galleriesCount(where: GalleryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
